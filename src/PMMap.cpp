#include "PMMap.h"

//----------------------------------------------------------------------------------------------------------------------------------------
PMMap::PMMap() {
		
	// Allocating memory for the map
	mFields = new PMField** [ROWS];
	for (int i = 0; i < ROWS; i++) {
		mFields[i] = new PMField* [COLUMNS];
	}
	
	mFirstTeleport = make_pair(0, 0);
	mSecondTeleport = make_pair(0, 0);

}
//----------------------------------------------------------------------------------------------------------------------------------------
PMMap::~PMMap() {

	//Cleaning all the allocated memory
	for (int i = 0; i < ROWS; i++) {
		for (int j = 0; j < COLUMNS; j++) {
			delete mFields[i][j];
		}
		delete [] mFields[i];
	}
	
	delete [] mFields;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::drawMap() const {

	for (int i = 0; i < ROWS; i++) {
		for (int j = 0; j < COLUMNS; j++) {
			mFields[i][j]->drawField(stdscr);
		}
	}
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
pair<int,int> PMMap::getPacmanSpawn() const {

	return mPacmanSpawn;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::setPacmanSpawn(pair<int,int> p) {

	mPacmanSpawn = p;

}
//----------------------------------------------------------------------------------------------------------------------------------------
pair<int,int> PMMap::getMonsterSpawn(int i) const {

	return mMonsterSpawn[i];

}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::setMonsterSpawn(pair<int,int> p, int i) {

	mMonsterSpawn[i] = p;

}
//----------------------------------------------------------------------------------------------------------------------------------------
bool PMMap::access(int y, int x) const {

	return mFields[y][x]->accessField();

}
//----------------------------------------------------------------------------------------------------------------------------------------
PMField *** PMMap::getFields() const {

	return mFields;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::setFields(PMField *** f) {

	mFields = f;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
int PMMap::getFoodCNT() const {

	return mFoodCNT;	
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::setFoodCNT(int c) {

	mFoodCNT = c;

}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::setFirstTeleport(pair<int,int> tp) {

	mFirstTeleport = tp;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
void PMMap::setSecondTeleport(pair<int,int> tp) {

	mSecondTeleport = tp;

}
//----------------------------------------------------------------------------------------------------------------------------------------
pair<int,int> PMMap::getFirstTeleport() const {

	return mFirstTeleport;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
pair<int,int> PMMap::getSecondTeleport() const {

	return mSecondTeleport;
	
}
//----------------------------------------------------------------------------------------------------------------------------------------
